;;-*-Lisp-*-
(in-package goal)

;; name: mod-custom-code.gc
;; name in dgo: mod-custom-code
;; dgos: TODO


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is this file for.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| This file contains function defenitions that are pre placed in the mod base,
so if you place custom code inside of these functions, it will exectue based on
the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
an orb |#


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun runs-every-frame ()
  (when *debug-segment*
    (orb-placer-maintenance)
    )

  ;; debug stuff for jak spawn/despawn
  (when (and *debug-segment*
             (cpad-hold? 0 l3)
             (cpad-pressed? 0 r3))
    ;; probably trying to control jak/camera, turn off edit mode
    (set! *orb-placer-enabled?* #f)
    ;; toggle target
    (cond
      (*target*
        (stop 'debug)
        )
      (else
        (start 'play (get-current-continue-forced *game-info*))
        (send-event *camera* 'set-slave-option (cam-slave-options COLLIDE))
        (send-event *camera* 'set-slave-option (cam-slave-options LINE_OF_SIGHT))
        )
      )
    )

  (none)
  )

(defun orb-hunt-update ()
  (runs-every-frame)

  ;; Draw info to the screen
  ;; (draw-orb-hunt-text)

  ;; (when (-> *mod-settings* pseudo-savestates?)
  ;;   (when (and (or (not *progress-process*) (gone? (-> *progress-process* 0)))
  ;;              (>= (- (-> *display* base-clock frame-counter) (-> *game-info* blackout-time)) (seconds 0.1))
  ;;              )
  ;;     ;; call post-init function
  ;;     (when (and *target* *practice-spawn-post-init*)
  ;;       (*practice-spawn-post-init*)
  ;;       (set! *practice-spawn-post-init* #f)
  ;;       )

  ;;     (when (cpad-hold? 0 r3)
  ;;       (cond
  ;;         ((cpad-pressed? 0 up)
  ;;           (format 0 "player tried to load tmp checkpoint~%")
  ;;           (speedrun-practice-spawn)
  ;;           )
  ;;         ((cpad-pressed? 0 down)
  ;;           (format 0 "player tried to save tmp checkpoint~%")
  ;;           (speedrun-practice-store-temp-checkpoint)
  ;;           )
  ;;         )
  ;;       )
  ;;     )
  ;;   )
  (none)
  )

(defun runs-on-orb-pickup ()
  ;; Code here runs on any precursor orb pickup
  (none)
  )

(defun runs-on-skullgem-pickup ()
  ;; Code here runs on any skull gem pickup

  (none)
  )

;; (defun runs-on-task-close ()

;;   (none)
;;   )

(defun runs-on-eco-pickup ((eco-type pickup-type))
  ;; Code here runs as soon as you pickup ANY eco

  (case eco-type
    ;; (((pickup-type eco-yellow))
    ;;   ;; Code here runs as soon as you pickup yellow eco

    ;;   )
    ;; (((pickup-type eco-red))      
    ;;   ;; Code here runs as soon as you pickup red eco

    ;;   )
    ;; (((pickup-type eco-blue))      
    ;;   ;; Code here runs as soon as you pickup blue eco

    ;;   )

    ;; (((pickup-type eco-green))      
    ;;   ;; Code here runs as soon as you pickup big green eco

    ;;   )
    (((pickup-type eco-pill-dark))      
      ;; Code here runs as soon as you pickup dark eco 

      )
    (((pickup-type eco-pill-green))      
      ;; Code here runs as soon as you pickup small green eco

      )
    (((pickup-type health))      
      ;; Code here runs as soon as you pickup health

      )
    )
  
  ;; === Here is an example of updating a field in the per-save data part of the mod-settings ===
  ;; 
  ;; (when (>= (-> *game-info* auto-save-which) 0)
  ;;   (set! 
  ;;         (-> *mod-settings* save-data (-> *game-info* auto-save-which) last-eco-color) 
  ;;         (string->symbol (enum->string pickup-type eco-type)))
  ;;   )
  ;;
  ;; ===  Note: changes aren't saved to file until you run (commit-to-file *mod-settings*)  ===

  (none)
  )

(defun runs-on-jak-spawn ()
  ;; Code here runs every time jak spawns (from new game, loading game, restart mission, or death)
  (none)
  )

(defun runs-on-jak-death ((death-event symbol))
  (case death-event
    (('dying)
      ;; Code here runs immediately every time jak dies, before any death animation or death cutscene

      )
    (('blackout)
      ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns
      
      ;; reset any hover cooldown since u died ig
      ;; (set! *last-hover-time* (the-as time-frame #f))
      )
    )
  
  (none)
  )

    
(defun runs-on-settings-saved ()
  ;; uncomment the below line to piggy-back and save your mod-settings whenever pc-settings are saved
  ;; (commit-to-file *mod-settings*)

  (none)
  )
(set! *runs-on-settings-saved-defined?* #t)
    
(defun runs-on-game-saved ((which-slot int))
  ;; (false! *auto-saving?*)
  ;; (set! *last-auto-save-time* (get-current-time))

  ;; uncomment the below line to piggy-back and save your mod-settings whenever the game is saved are saved to slot # "which-slot"
  ;; (commit-to-file *mod-settings*)

  (none)
  )


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; deprecated function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| these are no longer recommended/supported however we include them anyways to not break anyones mods.
|#
