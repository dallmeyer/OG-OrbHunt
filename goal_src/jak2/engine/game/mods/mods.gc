;;-*-Lisp-*-
(in-package goal)

;; more for testing purposes than anything
(defun move-actor-str-target-offset ((actor-name string) (x float) (y float) (z float))
  (cond 
    ((entity-by-name actor-name)
     (let* ((entity-actor (entity-by-name actor-name))
            (actor (the process-drawable (-> entity-actor extra process))))
            
       (when actor
         (vector-copy! (-> actor root trans) (target-pos 0))
         (+! (-> actor root trans x) (meters x))
         (+! (-> actor root trans y) (meters y))
         (+! (-> actor root trans z) (meters z))
         (vector-copy! (-> entity-actor trans) (target-pos 0))
         (+! (-> entity-actor trans x) (meters x))
         (+! (-> entity-actor trans y) (meters y))
         (+! (-> entity-actor trans z) (meters z))
         (vector-copy! (-> entity-actor extra trans) (target-pos 0))
         (+! (-> entity-actor extra trans x) (meters x))
         (+! (-> entity-actor extra trans y) (meters y))
         (+! (-> entity-actor extra trans z) (meters z))))))
          
        
      
    
  (none))
  

(defun move-actor-str ((actor-name string) (x float) (y float) (z float))
  (cond 
    ((string= actor-name "target")
     (set-vector-meters! (-> *target* root trans) x y z))
      
    ((entity-by-name actor-name)
     (let* ((entity-actor (entity-by-name actor-name))
            (actor (-> entity-actor extra process)))
            
       (when actor
         (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
         (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)))))
         ;; (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
          
        
      
    
  (none))
  

;; prints the position (root trans) of a process-drawable
(defmacro pd-pos-m (procname)
  `(let* ((obj (the process-drawable (process-by-ename ,procname)))
          (vec (-> obj root trans)))
    (format 0 "~m ~m ~m~%" (-> vec x) (-> vec y) (-> vec z) 4096.0)
    (none)))
    
  

(defmacro mod-copy-mesh-and-path (dst-name src-name)
  `(let ((dst (the nav-enemy (process-by-ename ,dst-name)))
         (src (the nav-enemy (process-by-ename ,src-name))))
         
    (when (and src dst)
      (set! (-> dst nav mesh) (-> src nav mesh))
      (set! (-> dst path flags) (-> src path flags))
      (curve-copy! (-> dst path curve) (-> src path curve))
      (set! (-> dst path num-cverts) (-> src path num-cverts))
      (set! (-> dst path cverts) (-> src path cverts)))))
      
    
  

(defmacro mod-no-collectable-bob (collectablename height)
  `(begin
    (when (process-by-ename ,collectablename)
      (set! (-> (the collectable (process-by-ename ,collectablename)) bob-amount) 0.0)
      (set! (-> (the collectable (process-by-ename ,collectablename)) root trans y) (meters ,height)))))
      
    
  

;; takes a path-control and xyz values to offsets every node in the path by
;; (defmacro shift-path! (path x y z)
;;   `(let ((voff (static-vector-meters ,x ,y ,z)))
;;     (dotimes (idx (-> ,path num-cverts))
;;       (vector+! (-> ,path cverts idx) (-> ,path cverts idx) voff)
;;       )
;;     )
;;   )

;; (defmacro path-print-meters (path)
;;   `(dotimes (idx (-> ,path num-cverts))
;;     (print-vector3m (-> ,path cverts idx))
;;     )
;;   )

(defmacro move-pd-str (actor-name x y z)
  `(let ((pd (the process-drawable (process-by-ename ,actor-name))))
    (when pd
      (set-vector-meters! (-> pd root trans) ,x ,y ,z))
      
    (none)))
    
  

(defmacro set-pd-quat (actor-name x y z w)
  `(let ((pd (the process-drawable (process-by-ename ,actor-name))))
    (when pd
      (set-vector! (-> pd root quat) ,x ,y ,z ,w))
      
    (none)))
    
  

;; (defun mod-override-plat-path ((obj plat) (arg0 entity-actor))
;;   (case (-> obj name) :comp name=
;;     (('citb-launcher-4) ;; back and forth - shortcut to other side
;;       (set-vector-meters! (-> obj path cverts 0) 2630.9350 -23.0000 -4715.0468)
;;       (set-vector-meters! (-> obj path cverts 1) 2649.4807 -23.0000 -4715.1137)
;;       )
;;     )
;;   (none)
;;   )

(defmacro spawn-skill (x y z bob? name)
  `(spawn-skill-internal ,x ,y ,z ,bob? ,name 1.0))
  

(defmacro spawn-gold-skill (x y z bob? name)
  `(spawn-skill-internal ,x ,y ,z ,bob? ,name (-> *FACT-bank* super-skill-inc)))
  

(defun spawn-skill-internal ((x float) (y float) (z float) (bob? symbol) (name string) (amount float))
  (format 0 "trying to spawn ~A~%" name)
  (cond
    ((process-by-name name *active-pool*)
     (format 0 "~A is already spawned, skipping"))
      
    (#f ;; TODO track collection
      (format 0 "~A is already collected, skipping"))
      
    (else
      (let ((fax (new 'static 'fact-info)))
        (set! (-> fax pickup-type) (pickup-type skill))
        (set! (-> fax pickup-amount) amount)
        (set! (-> fax pickup-spawn-amount) amount)
        ;; make sure it doesn't timeout and disappear
        (logior! (-> fax options) (actor-option fade-out))
        (set! (-> fax fade-time) (the-as time-frame 0))
        (if bob?
          (logior! (-> fax options) (actor-option force-bob))
          (logclear! (-> fax options) (actor-option force-bob)))
          
        (let ((vec (new 'stack-no-clear 'vector)))
          (set-vector-meters! vec x y z)
          (let ((proc (ppointer->process (birth-pickup-at-point-named vec (pickup-type skill) amount #t *active-pool* fax name))))
            ;; (copy-string<-string (-> proc name) ,name) ;; lol this overwrote the "skill" string for everyone
            (format 0 "spawned ~A~%" proc)))))))
            
          
        
      
    
  

(define *baby-mode-orb-dist* (the-as float #f))
(defun baby-mode-find-closest-orb ()
  ;; find closest orb
  (set! *baby-mode-orb-dist* (the-as float #f))
  (when (not (or (= *master-mode* 'menu) (= *master-mode* 'progress)))
    (dotimes (s4-0 (-> *level* length))
      (let ((v1-8 (-> *level* level s4-0)))
        (when (= (-> v1-8 status) 'active)
          (let ((s3-0 (-> v1-8 bsp level entity)))
            (dotimes (s2-0 (-> s3-0 length))
              (let* ((s0-0 (-> s3-0 data s2-0 entity))
                     (s1-0 (-> s0-0 extra trans))
                     (proc (-> s0-0 extra process)))
                     
                (when (and proc (type-type? (-> proc type) skill)) ;; open orbs
                  (let ((dist (vector-vector-distance 
                                (target-pos 0) 
                                (-> (the process-drawable (-> s0-0 extra process)) root trans))))
                    (if (or (= *baby-mode-orb-dist* #f) (< dist *baby-mode-orb-dist*))
                      (set! *baby-mode-orb-dist* dist)))))))))))
                      
                    
                  
                
              
            
          ;; TODO check skills spawned the hacky way too
          
        
      
    
  (none))
  
(defun-extern hover-need-to-cooldown? symbol)
(defun draw-baby-mode ()
  (let ((hover-offset 0))
    (with-dma-buffer-add-bucket ((buf (-> (current-frame) global-buf))
                                  (bucket-id debug-no-zbuf1))
      (when (and #f (pause-allowed?) (-> *pc-settings* baby-mode?))
        (+! hover-offset 1)
        (cond
          ((= *baby-mode-orb-dist* #f)
            (draw-string-xy (string-format "Closest Orb: N/A")
                            buf 5 395 (font-color transparent) (font-flags pc-hack kerning shadow))
            )
          (else
            ;; color based on distance
            (let ((fc (cond
                      ((< *baby-mode-orb-dist* (meters 10.0)) (font-color orange))
                      ((< *baby-mode-orb-dist* (meters 20.0)) (font-color progress-old-yellow))
                      ((< *baby-mode-orb-dist* (meters 30.0)) (font-color flat-yellow))
                      ((< *baby-mode-orb-dist* (meters 40.0)) (font-color progress-old-blue))
                      ((< *baby-mode-orb-dist* (meters 50.0)) (font-color cyan))
                      (else (font-color blue)))))
                      
              (draw-string-xy (string-format "Closest Orb: ~,,2Mm"
                                            *baby-mode-orb-dist*)
                              buf 5 395 fc (font-flags pc-hack kerning shadow))
              )
            )
          )
        )
      (cond
        ((hover-need-to-cooldown?)
          (draw-string-xy (string-format "Hover cooldown: ~Ds / ~D"
                                (/ (- (+ *last-hover-time* (seconds 60)) (current-time)) TICKS_PER_SECOND) *target-board-hold-tricks*)
                          buf 5 (- 395 (* 15 hover-offset)) (font-color orange) (font-flags pc-hack kerning shadow))
          )
        ;; (else
        ;;   (draw-string-xy (string-format "Hover cooldown: - / ~D" *target-board-hold-tricks*)
        ;;                   buf 5 (- 395 (* 15 hover-offset)) (font-color orange) (font-flags pc-hack kerning shadow))
        ;;   )
        )
      )
    )
  
  (none))


(defun mod-spawn-new-entities ((level symbol))
  (format 0 "spawning extra mod entities for level ~A~%" level)
  (case level
    )
    
  (none))
  

(defun prison-door-button-check ((button-name string) (door-name string))
  (when *target*
    (case (-> *target* state name)
      ;; if target is attacking...
      (('target-attack 'target-running-attack 'target-attack-uppercut-jump 'target-attack-air 'target-flop)
       (let ((button (the part-spawner (process-by-ename button-name)))
             (door (process-by-ename door-name)))
              
         ;; ... and button and door both exist, and player is close enough ...
         (when (and button door (-> button root) (-> button root trans))
           (let ((button-vec (-> button root trans))
                 (target-vec (new 'stack 'vector))
                 )
             (vector-copy! target-vec (-> *target* root trans))
             (+! (-> target-vec y) (meters 1.5))
             (when (<= (vector-vector-distance target-vec button-vec) (meters 2.0))
               ;; ... then we (try to) open door ...
               (when (send-event door 'open)
                 ;; ... if successful we play sounds and turn off lights
                 (sound-play "smack-surface")
                 (sound-play "timer-warn")
                 (set! (-> button part data 0 flags) (the sp-launch-state-flags 0))
                 (set! (-> button part data 1 flags) (the sp-launch-state-flags 0))
                 (set! (-> button part data 2 flags) (the sp-launch-state-flags 0))))))))))
    
  (none))
  

(defun stdmb-hatch-check ((stdmb-hatch string))
  (when *target*
    (case (-> *target* state name)
      ;; if target is attacking...
      (('target-attack 'target-running-attack 'target-attack-uppercut-jump 'target-attack-air 'target-flop)
       (let ((hatch (the process-drawable (process-by-ename stdmb-hatch))))
              
         ;; ... and hatch exists, and player is close enough ...
         (when (and hatch (-> hatch root) (-> hatch root trans))
           (let ((hatch-vec (-> hatch root trans)))
             (when (<= (vector-vector-distance (-> *target* root trans) hatch-vec) (meters 4.0))
               ;; ... then we (try to) open hatch ...
               (when (send-event hatch 'open)
                 ;; ... if successful we play sound
                 (sound-play "timer-warn")))))))))
                  
                
              
            
          
        
      
    
  (none))
  

(defun mod-override-init-position ((obj process-drawable) (arg0 entity-actor))
  (case (-> obj name) :comp name=
    ;; ====== ORBS / CITY ======
    ;; none
    ;; ====== ORBS / FORTRESS ======
    ;; === prison (first 2 rooms) ===
    (('skill-49) (set-vector-meters! (-> arg0 extra trans)  472.0 8.55 103.1)) ;; behind/under chair at start
    (('skill-50) (set-vector-meters! (-> arg0 extra trans)  547.14 12.4 169.8)) ;; in crack behind boxes along normal path
    ;; === forexita (3rd room until shooting you from below) ===
    (('skill-62) (set-vector-meters! (-> arg0 extra trans)  611.05  75.9 136.25)) ;; atop crane in middle of room
    (('skill-63) (set-vector-meters! (-> arg0 extra trans)  679.99  87.1  90.4)) ;; up in crack above normal position 
    ;; === forexitb (shooting you from below to city exit) ===
    (('skill-69) (set-vector-meters! (-> arg0 extra trans)  712.23  84.5 143.63)) ;; up in pipes, left when first entering room
    (('skill-8) (set-vector-meters! (-> arg0 extra trans)  675.0  72.5  22.5)) ;; up behind pipe on left entering room before slide
    (('skill-70) (set-vector-meters! (-> arg0 extra trans)  703.0  76.6  25.65)) ;; infin jump on chain -> extended to top of crane
    (('skill-71) (set-vector-meters! (-> arg0 extra trans)  598.5  28.8  51.5)) ;; up high atop pipe - right before exit, stand on lip of pipe near end of slide and boosted over. or boosted from edge before exit and ledge grab thru pipe ("OOB")
    ;; ====== ORBS / STADIUM ======
    ;; none
    ;; ====== ORBS / PALACE ======
    ;; === palshaft (shaft up to cable bridge) ===
    (('skill-31) (set-vector-meters! (-> arg0 extra trans) 229.96 457.0 -166.2))  ;; top of elevator shaft on light, use other lights for infinite jumps
    ;; === palcab (cable bridge to palace) ===
    (('skill-32) (set-vector-meters! (-> arg0 extra trans) 216.1 401.5 -18.9))  ;; far side of first hotplate section, ledgegrab
    (('skill-33) (set-vector-meters! (-> arg0 extra trans) 225.70 401.31  -4.96))  ;; atop light at end of first hotplate section
    ;; === palroof/palboss ===
    (('skill-34) (set-vector-meters! (-> arg0 extra trans) 181.05 417.75 728.3))  ;; over wall in final phase of praxis 1
    ;; ====== ORBS / CASTLE ======
    ;; === castle ===
    ;; skill-126
    ;; skill-127
    ;; skill-128
    ;; skill-129
    ;; skill-130
    ;; ====== ORBS / RUINS ======
    ;; === ruins === 
    ;; (('skill-1) (set-vector-meters! (-> arg0 extra trans)  )) ;; this weird one doesn't actually spawn? but move it for the lulz - 
    (('skill-2) (set-vector-meters! (-> arg0 extra trans)  997.29  80.0 -656.2)) ;; atop wall in far back (hover)
    ;; (('skill-3) (set-vector-meters! (-> arg0 extra trans)  )) ;; 
    ;; (('skill-4) (set-vector-meters! (-> arg0 extra trans)  )) ;;
    ;; (('skill-5) (set-vector-meters! (-> arg0 extra trans)  )) ;;
    ;; (('skill-6) (set-vector-meters! (-> arg0 extra trans)  )) ;;
    ;; (('skill-7) (set-vector-meters! (-> arg0 extra trans)  )) ;;
    ;; (('skill-89) (set-vector-meters! (-> arg0 extra trans)  )) ;;
    ;; (('skill-90) (set-vector-meters! (-> arg0 extra trans)  )) ;;
    ;; === sagehut ===
    ;; none
    ;; ====== ORBS / ATOLL ======
    ;; === atoll/atoll-ext ===
    (('skill-10) (set-vector-meters! (-> arg0 extra trans)  580.42   9.00 -968.32)) ;; in small pipe left of big pipe where orig
    (('skill-11) (set-vector-meters! (-> arg0 extra trans)  609.50  -3.00 -834.61)) ;; in water against wall, around to right at entrance
    (('skill-12) (set-vector-meters! (-> arg0 extra trans)  558.53  65.46 -826.02)) ;; directly above entrance, just climb then abah
    (('skill-13) (set-vector-meters! (-> arg0 extra trans)  343.92  43.25 -848.49)) ;; to the right up along wall from ^, couple boosteds to slippery standpoint to extended
    (('skill-21) (set-vector-meters! (-> arg0 extra trans)  564.15  43.91 -952.54)) ;; up on inner wall near pipes at start, abah or prob other ways
    (('skill-22) (set-vector-meters! (-> arg0 extra trans)  579.39  58.49 -971.51)) ;; in tree up high on inner wall, follow from ^
    (('skill-23) (set-vector-meters! (-> arg0 extra trans)  478.69  55.0 -1009.29)) ;; up on pipe near inner wall, next to first(?) big metalhead spawn
    ;; ====== ORBS / SEWER ======
    ;; === sewer/sewerb ===
    ;; skill-124
    ;; === sewesc/sewescb ===
    ;; none
    ;; ====== ORBS / STRIP ======
    ;; === strip ===
    ;; skill-108
    ;; skill-109
    ;; skill-110
    ;; skill-111
    ;; skill-112
    ;; skill-113
    ;; skill-114
    ;; ====== ORBS / MOUNTAIN ======
    ;; === mountain/mtnext ===
    ;; skill-76
    ;; skill-77
    ;; skill-91
    ;; skill-92
    ;; skill-93
    ;; skill-94
    ;; skill-95
    ;; skill-96
    ;; skill-97
    ;; skill-98
    ;; skill-99
    ;; skill-100
    ;; skill-101
    ;; skill-102
    ;; skill-103
    ;; skill-104
    ;; skill-105
    ;; === mincan === 
    ;; none
    ;; ====== ORBS / FOREST ======
    ;; === forest (entrance side?) ===
    ;; skill-123
    ;; === forestb (sage side?) ===
    ;; skill-115
    ;; skill-116
    ;; skill-117
    ;; skill-118
    ;; skill-119
    ;; skill-120
    ;; skill-121
    ;; skill-122
    ;; ====== ORBS / DRILL ======
    ;; === drill/drillmid/drillmtn ===
    ;; skill-53
    ;; skill-54
    ;; skill-55
    ;; skill-56
    ;; skill-57
    ;; === drillb (mech suit area) === 
    ;; none
    ;; ====== ORBS / TOMB ======
    ;; === tomba (central chamber) ===
    (('skill-65) (set-vector-meters! (-> arg0 extra trans) 222.33 -64.0 1265.3))  ;; corner of pillar at start of OOB for left tomb skip
    (('skill-66) (set-vector-meters! (-> arg0 extra trans) 192.13 -48.0 1069.2)) ;; little hole under bridge near top
    (('skill-67) (set-vector-meters! (-> arg0 extra trans) 162.35 -16.7 1057.65)) ;; up around right corner at start
    (('skill-68) (set-vector-meters! (-> arg0 extra trans) 172.33 -22.0 1383.98)) ;; top right above boss - proxy from torch to upper ledge then abbah bounce (or just proxy/hover)
    ;; === tombb (left tomb) ===
    (('skill-9) (set-vector-meters! (-> arg0 extra trans) 332.85 -36.5 1253.96)) ;; in flame above where it usually is
    ;; === tombc (right tomb) ===
    ;; none
    ;; === tombd (entrance area) ===
    ;; none
    ;; === tombe (daxter spider chase) ===
    ;; none
    ;; === tombboss (praxis 2)
    ;; none 
    ;; ====== ORBS / DIG ======
    ;; === dig3a (front room with metalheads) ===
    ;; skill-14
    ;; skill-15
    ;; skill-16
    ;; === dig3b (second room with metalheads, buttons) ===
    ;; skill-17
    ;; skill-18
    ;; skill-19
    ;; skill-20
    ;; skill-106
    ;; ====== ORBS / CANYON ======
    ;; fake level - see MOUNTAIN
    ;; ====== ORBS / CONSITE ======
    ;; === consite/consiteb ===
    ;; skill-83
    ;; skill-84
    ;; ====== ORBS / UNDER ======
    ;; === under/underb (mech suit area) ===
    ;; skill-87
    ;; skill-88 ;; originally OOB but we use it
    ;; ====== ORBS / NEST ======
    ;; === nest (outside) ===
    ;; skill-24
    ;; skill-25
    ;; skill-26
    ;; skill-27
    ;; skill-28
    ;; skill-29
    ;; skill-30
    ;; === nestb (inside) ===
    ;; none
    ;; ====== ORBS / DEFAULT ======
    ;; === village1 === 
    ;; none

    ;; ====== BURNING BUSH / ORB HUNT ======
    ;; === ctygena (canals near farm) ===
    (('burning-bush-16) ;; orbhunt - 
     (set-vector-meters! (-> arg0 extra trans) -383.08  23.40 -281.34)) ;; awning near first turn from farm
      
    ;; === ctygenb (canals connecting ctygena, ctyslumb, stadium, with palshaft entrance) ===
    ;; (('burning-bush-) ;; orbhunt - 
    ;;   (set-vector-meters! (-> arg0 extra trans) ) ;; 
    ;;   )
    ;; === ctygenc) canals connecting ctygena and ctypal) ===
    ;; (('burning-bush-) ;; orbhunt - 
    ;;   (set-vector-meters! (-> arg0 extra trans) ) ;; 
    ;;   )
    ;; === ctysluma (near hideout) ===
    (('burning-bush-9)  ;; orbhunt - more related overrides in mod-override-burning-bush-get-on!
     (set-vector-meters! (-> arg0 extra trans) 1125.92   8.14 149.91)) ;; near yellow barrier skip hidden by fruit
      
    ;; === ctyslumb (near prison exit) ===
    (('burning-bush-17)  ;; orbhunt - more related overrides in mod-override-burning-bush-get-on!
     (set-vector-meters! (-> arg0 extra trans) 827.57  24.6  56.04)) ;; atop roundabout building towards ctysluma
      
    ;; === ctyslumc (water slums) ===
    (('burning-bush-11) ;; orbhunt - more related overrides in mod-override-burning-bush-get-on!
     (set-vector-meters! (-> arg0 extra trans) 440.0  19.87 -536.5))  ;; atop small building in corner
      
    ;; === ctyport ===
    (('burning-bush-8) ;; orbhunt - more related overrides in mod-override-burning-bush-get-on!
     (set-vector-meters! (-> arg0 extra trans) 336.18   7.87 1721.80)  ;; jak 3 moment
      ;; fix rotation. 2 is 'rotoffset. do this to display: (set-entity! *entity-debug-inspect* (entity-by-name "burning-bush-8"))
     (set! (-> (the (pointer float) (get-tag-index-data arg0 2))) 32768.0)) 
      

    ;; === ctrfarma (between bazaar and ctygen, with mountain/forest exit) ===
    (('burning-bush-10)
     (set-vector-meters! (-> arg0 extra trans) -367.23  15.88  92.80)) ;; atop sprinkler near ctygen
      
    ;; === ctyinda (near port) ===
    (('burning-bush-5)
     (set-vector-meters! (-> arg0 extra trans) 959.75  24.94 896.6)) ;; atop walkway

    ;; === ctyindb ===
    (('burning-bush-21)
     (set-vector-meters! (-> arg0 extra trans) 1055.40   9.89 684.95))  ;; between generators midway thru level
     
    ;; === ctymarka ===
    ;; (('burning-bush-3) ;; racepoint-1 and get-to-12
    ;;  (set-vector-meters! (-> arg0 extra trans) -260.14   9.32 703.85))  ;; in some path between squares idk
      
    ;; ====== BURNING BUSH / STADIUM ======
    ;; === stadium ===
    (('burning-bush-20)
     (set-vector-meters! (-> arg0 extra trans) 44.40  12.01 -433.91))  ;; end of hallway to keira garage
      

    ;; ====== MISC ======
    ;; === prison ===
    ;; === forexita ===
    (('crate-577) (set-vector-meters! (-> arg0 extra trans) 673.71  81.37 147.63))  ;; dark eco - on top of machine after swingpole
    (('crate-578) (set-vector-meters! (-> arg0 extra trans) 650.28  72.25 126.25))  ;; health - behind machine where you ledgegrab after boosted in speedruns
    (('crate-579) (set-vector-meters! (-> arg0 extra trans) 599.86  58.83 120.61))  ;; health - on pipe in middle of room
    (('crate-580) (set-vector-meters! (-> arg0 extra trans) 606.08  65.81  93.28))  ;; dark eco - on top of machine before where you boosted in speedruns
    (('crate-668) (set-vector-meters! (-> arg0 extra trans) 618.70  26.00 181.01))  ;; dark eco - behind pipe at bottom/entrance
    (('crate-669) (set-vector-meters! (-> arg0 extra trans) 724.94  52.24 164.13))  ;; dark eco - bottom of pit
    ;; === forexitb ===
    (('crate-953) (set-vector-meters! (-> arg0 extra trans) 538.16  26.34   40.87))  ;; health - moved to cylinder from ceiling for fortexitb-skill-4/5
    (('crate-954) (set-vector-meters! (-> arg0 extra trans) 548.87  26.69   64.18))  ;; health - moved to cylinder from ceiling for fortexitb-skill-5
    ;; === cty-sluma (near hideout) === 
    (('cty-fruit-stand-1)
     (set-vector-meters! (-> arg0 extra trans) 1132.0   8.2 163.0) ;; 
     (set-vector! (-> arg0 quat) 0.0 0.0 0.0 0.0))
      
    (('cty-fruit-stand-2)
     (set-vector-meters! (-> arg0 extra trans) 1132.0   10.2 160.0) ;; 
     (set-vector! (-> arg0 quat) 0.0 0.0 0.0 0.0))
      
    (('cty-fruit-stand-3)
     (set-vector-meters! (-> arg0 extra trans) 1132.0   12.2 157.0) ;; 
     (set-vector! (-> arg0 quat) 0.0 0.0 0.0 0.0))
      
    (('cty-fruit-stand-4)
     (set-vector-meters! (-> arg0 extra trans) 1132.0   14.2 154.0) ;; 
     (set-vector! (-> arg0 quat) 0.0 0.0 0.0 0.0))
      
    (('cty-fruit-stand-5)
     (set-vector-meters! (-> arg0 extra trans) 1132.0   16.2 151.0) ;;
     (set-vector! (-> arg0 quat) 0.0 0.0 0.0 0.0))
      
    ;; (('cty-fruit-stand-6)
    ;;   (set-vector-meters! (-> arg0 extra trans) 803.61   13.26 161.12) ;;
    ;;   (set-vector! (-> arg0 quat) 0.0 0.0 0.0 0.0)
    ;;   )
    ;; (('cty-fruit-stand-7)
    ;;   (set-vector-meters! (-> arg0 extra trans) 803.61   15.26 158.12) ;;
    ;;   (set-vector! (-> arg0 quat) 0.0 0.0 0.0 0.0)
    ;;   )
    ;; village1
    (('crate-665) (set-vector-meters! (-> arg0 extra trans) -82.0 21.5 -10.3))      ;; high ledge between bridges
    (('crate-666) (set-vector-meters! (-> arg0 extra trans) 32.5 12.5 -132.7))      ;; on tree 
    (('crate-667) (set-vector-meters! (-> arg0 extra trans) -132.6 11.9 32.3)))      ;; behind mayors
    
  (none))
  

(defun mod-turbo-jetboard? () 
  (or (= (level-status *level* 'stadiumb) 'active)
      (= (level-status *level* 'stadiumc) 'active)
      (= (level-status *level* 'stadiumd) 'active)))
      
(define *last-hover-time* (the time-frame #f))

(defun hover-need-to-cooldown? ()
  ;; need to cooldown if we have a last hover time and it isn't 1m ago
  (if (and *last-hover-time*
       (not (time-elapsed? *last-hover-time* (seconds 60)))
       )
    #t
    #f
    )
  )

(defun mod-run-each-frame ()
  ;; GENERAL
  (cond
    ((board-hovering?)
      (set-time! *last-hover-time*)
      )
    ((not (hover-need-to-cooldown?))
      (set! *last-hover-time* (the time-frame #f))
      )
    )

  ;; === prison (first 2 rooms) ===
  ;; check for fake button press to unlock cells
  (prison-door-button-check "prison-part-374" "prsn-cell-door-4")
  (prison-door-button-check "prison-part-375" "prsn-cell-door-3")
  (prison-door-button-check "prison-part-376" "prsn-cell-door-2")
  (prison-door-button-check "prison-part-377" "prsn-cell-door-1")
  (prison-door-button-check "prison-part-378" "prsn-cell-door-5")
  ;; prevent softlock - you could get stuck in 2 right rooms, but if you get orb then unlock door
  (let ((door (process-by-ename "prsn-cell-door-2"))
        (orb (process-by-ename "prison-skill-7"))
        (button (the part-spawner (process-by-ename "prison-part-376")))
        )
    (when (and door (not orb))
      (when (send-event door 'open)
        ;; ... if successful we play sounds and turn off lights
        ;; (sound-play "smack-surface")
        ;; (sound-play "timer-warn")
        (set! (-> button part data 0 flags) (the sp-launch-state-flags 0))
        (set! (-> button part data 1 flags) (the sp-launch-state-flags 0))
        (set! (-> button part data 2 flags) (the sp-launch-state-flags 0))
        )
      )
    )
  ;; === stadiumb (class 3) ===
  (stdmb-hatch-check "stdmb-race-hatch-2")

  ;; (move-actor-str-target-offset "ctyport-part-86" 0.0 1.5 0.0)  ;; jakpoop

  (when (and *debug-segment* (cpad-pressed? 0 l3) (cpad-hold? 0 r3))
    ;; fuk ur subtitles we use this for collision renderer toggle
    (toggleCollisionRenderer)
    ;; hideskip noboard
    (pc-set-collision-mask (pc-collision-mode skiphide) (the int (pc-pat-skip-hack noboard)) #t)
    )


  (cond
    ((cpad-hold? 0 l3)
      (let ((map-texture-status (file-status (-> *bigmap* bigmap-image) "world-map" (the-as int (-> *bigmap* load-index))))
            (icon-texture-status (file-status (-> *bigmap* tpage) "progress-minimap" 0))
            )
        (when (not map-texture-status)
          ;; load it
          (enable-drawing *bigmap*)
          (set! (-> *bigmap* loading-flag) #t)
          (set-pending-file (-> *bigmap* bigmap-image) "world-map" (the-as int (-> *bigmap* load-index)) (process->handle *dproc*) 0.0)
          )
        (when (not icon-texture-status)
          ;; load it
          (enable-drawing *bigmap*)
          (set! (-> *bigmap* loading-flag) #t)
          (set-pending-file (-> *bigmap* tpage) "progress-minimap" 0 (process->handle *dproc*) 0.0)
          )

        (when (and (= map-texture-status 'active) (= icon-texture-status 'active))
          ;; loaded, draw it
          (draw *bigmap* 1792 1840 2304 2256)
          )
        )
      )
    ((not *progress-process*)
      (disable-drawing *bigmap*)
      )
    )

  (none))
  
