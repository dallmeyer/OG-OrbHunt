;;-*-Lisp-*-
(in-package goal)

(defmacro mod-copy-mesh-and-path (dst-name src-name)
  `(let ((dst (the nav-enemy (process-by-ename ,dst-name)))
         (src (the nav-enemy (process-by-ename ,src-name)))
         )
    (when (and src dst)
      (set! (-> dst nav mesh) (-> src nav mesh))
      (set! (-> dst path flags) (-> src path flags))
      (curve-copy! (-> dst path curve) (-> src path curve))
      (set! (-> dst path num-cverts) (-> src path num-cverts))
      (set! (-> dst path cverts) (-> src path cverts))
      )
    )
  )

(defmacro mod-no-collectable-bob (collectablename height)
  `(begin
    (when (process-by-ename ,collectablename)
      (set! (-> (the collectable (process-by-ename ,collectablename)) bob-amount) 0.0)
      (set! (-> (the collectable (process-by-ename ,collectablename)) root trans y) (meters ,height))
      )
    )
  )

;; takes a path-control and xyz values to offsets every node in the path by
;; (defmacro shift-path! (path x y z)
;;   `(let ((voff (static-vector-meters ,x ,y ,z)))
;;     (dotimes (idx (-> ,path num-cverts))
;;       (vector+! (-> ,path cverts idx) (-> ,path cverts idx) voff)
;;       )
;;     )
;;   )

;; (defmacro path-print-meters (path)
;;   `(dotimes (idx (-> ,path num-cverts))
;;     (print-vector3m (-> ,path cverts idx))
;;     )
;;   )

(defmacro move-pd-str (actor-name x y z)
  `(let ((pd (the process-drawable (process-by-ename ,actor-name))))
    (when pd
      (set-vector-meters! (-> pd root trans) ,x ,y ,z)
      )
    (none)
    )
  )

(defmacro set-pd-quat (actor-name x y z w)
  `(let ((pd (the process-drawable (process-by-ename ,actor-name))))
    (when pd
      (set-vector! (-> pd root quat) ,x ,y ,z ,w)
      )
    (none)
    )
  )

;; (defun mod-override-plat-path ((obj plat) (arg0 entity-actor))
;;   (case (-> obj name) :comp name=
;;     (('citb-launcher-4) ;; back and forth - shortcut to other side
;;       (set-vector-meters! (-> obj path cverts 0) 2630.9350 -23.0000 -4715.0468)
;;       (set-vector-meters! (-> obj path cverts 1) 2649.4807 -23.0000 -4715.1137)
;;       )
;;     )
;;   (none)
;;   )

(defmacro spawn-skill (x y z bob? name)
  `(when *target*
    (let ((fax (new 'stack 'fact-info *target* (pickup-type skill) 1.0)))
      ;; make sure it doesn't timeout and disappear
      (logior! (-> fax options) (actor-option fade-out))
      (when ,bob?
        (logior! (-> fax options) (actor-option force-bob))
        )
      (set! (-> fax fade-time) (the-as time-frame 0))
      (let ((proc (ppointer->process (birth-pickup-at-point (static-vector-meters ,x ,y ,z) (pickup-type skill) 1.0 #t *target* fax))))
        (copy-string<-string (-> proc name) ,name)
        proc  ;; return proc
        )
      )
    )
  )

(defun mod-spawn-new-entities ()
  ;; fortress
  ;; === prison (first 2 rooms) ===
  (spawn-skill 485.36   4.0     91.0    #t "prison-skill-1") ;; under platform dax comes up on 
  (spawn-skill 463.0    26.78   54.1    #t "prison-skill-2") ;; above warpgate
  (spawn-skill 528.85   22.5    129.86  #t "prison-skill-3") ;; up/behind pipes on right before 2nd room
  (spawn-skill 546.2    14.8    199.95  #t "prison-skill-4") ;; on shelf in 2nd room
  (spawn-skill 497.5    31.5    138.3   #t "prison-skill-5") ;; up high in corner, abbah bounce on vault handle in 2nd room
  (spawn-skill 531.59   30.2    171.46  #t "prison-skill-6") ;; above pipes in 2nd room (extended, maybe boosted)
  (spawn-skill 510.29   8.3     59.07   #t "prison-skill-7") ;; inside 3rd cell
  ;; --- fortexita (3rd room until shooting you from below) ===
  (spawn-skill 561.5    95.0    126.05  #t "fortexita-skill-1") ;; way up between pipes on left where you learn to crouch jump (boosted from nearby pipe climb)
  (spawn-skill 586.0    77.0    91.48   #t "fortexita-skill-2") ;; against wall above machines near first guard (jump off small pipe)
  (spawn-skill 689.9    93.0    111.55  #t "fortexita-skill-3") ;; way up on pipes above swingpole
  (spawn-skill 725.33   57.0    180.1   #t "fortexita-skill-4") ;; in pit below where original orb is, but behind metal tubing on right
  (spawn-skill 750.21   91.3    167.9   #t "fortexita-skill-5") ;; end of hallway before next section, way up on pipes
  (spawn-skill 676.46   99.24   169.99  #t "fortexita-skill-6") ;; farther up from ^ and then backtrack
  ;; === forexitb (shooting you from below to city exit) ===
  (spawn-skill 740.8    78.0    24.3    #t "fortexitb-skill-1") ;; room with chains, up in far right corner (infin jump on chain, uppercut to pipes)
  (spawn-skill 601.25   4.71    42.9    #f "fortexitb-skill-2") ;; underwater in corner with debris
  (spawn-skill 537.70   27.3    33.21   #t "fortexitb-skill-3") ;; on backside of first cylinder thing on ceiling
  (spawn-skill 523.80   27.9    51.82   #t "fortexitb-skill-4") ;; follow from ^, on pipes in back of room
  (spawn-skill 551.6    27.3    76.18   #t "fortexitb-skill-5") ;; on JakPiss sewer pipe
  ;; === ctyslumb (near prison exit) ===
  (spawn-skill 548.85   40.5    -0.73   #t "ctyslumb-skill-1")  ;; immediately up left from prison exit (can get back up ejecting from zoomer), grab then with jump + abbah bounce, or return with jetboard
  (spawn-skill 501.0    9.1     -192.0  #t "ctyslumb-skill-2")  ;; behind burning can towards ctyslumc (water slums)
  (spawn-skill 693.0    35.05   -310.3  #t "ctyslumb-skill-3")  ;; up high near billboards, jump from vehicle to pipes
  (spawn-skill 430.0    9.3     -18.9   #t "ctyslumb-skill-4")  ;; inside end of pipe near green barrier
  ;; === ctysluma (near HQ) ===
  (spawn-skill 833.8    34.5    13.9    #t "ctysluma-skill-1")  ;; in window above pipes in roundabout (swag can rocket to pipes)
  (spawn-skill 636.2    43.3    -172.4  #t "ctysluma-skill-2")  ;; ???
  ;; === ctyslums (water slums) ===
  (spawn-skill 656.25   27.3    -733.02 #t "ctyslumc-skill-1")  ;; in chimney exhaust on building right side of atoll entrance
  (spawn-skill 465.60   19.8    -757.27 #t "ctyslumc-skill-2")  ;; behind bent roof on building left side of atoll entrance
  (none)
  )

(defun prison-door-button-check ((button-name string) (door-name string))
  (when *target*
    (case (-> *target* state name)
      ;; if target is attacking...
      (('target-attack 'target-running-attack 'target-attack-uppercut-jump 'target-attack-air 'target-flop)
        (let ((button (the part-spawner (process-by-ename button-name)))
              (door (process-by-ename door-name))
              )
          ;; ... and button and door both exist, and player is close enough ...
          (when (and button door (-> button root) (-> button root trans))
            (let ((button-vec (-> button root trans)))
              (when (<= (vector-vector-xz-distance (-> *target* root trans) button-vec) (meters 2.0))
                ;; ... then we (try to) open door ...
                (when (send-event door 'open)
                  ;; ... if successful we play sounds and turn off lights
                  (sound-play "smack-surface")
                  (sound-play "timer-warn")
                  (set! (-> button part data 0 flags) (the sp-launch-state-flags 0))
                  (set! (-> button part data 1 flags) (the sp-launch-state-flags 0))
                  (set! (-> button part data 2 flags) (the sp-launch-state-flags 0))
                  )
                )
              )
            )
          )
        )
      )
    )
  (none)
  )

(defun mod-override-init-position ((obj process-drawable) (arg0 entity-actor))
  (case (-> obj name) :comp name=
    ;; ====== ORBS ======
    ;; fortress
    ;; === prison (first 2 rooms) ===
    (('skill-49) (set-vector-meters! (-> arg0 extra trans)  472.0 8.55 103.1)) ;; behind/under chair at start
    (('skill-50) (set-vector-meters! (-> arg0 extra trans)  547.14 12.4 169.8)) ;; in crack behind boxes along normal path
    ;; === forexita (3rd room until shooting you from below) ===
    (('skill-62) (set-vector-meters! (-> arg0 extra trans)  611.05  75.9 136.25)) ;; atop crane in middle of room
    (('skill-63) (set-vector-meters! (-> arg0 extra trans)  679.99  87.1  90.4)) ;; up in crack above normal position 
    ;; === forexitb (shooting you from below to city exit) ===
    (('skill-69) (set-vector-meters! (-> arg0 extra trans)  712.23  84.5 143.63)) ;; up in pipes, left when first entering room
    (('skill-8) (set-vector-meters! (-> arg0 extra trans)  675.0  72.5  22.5)) ;; up behind pipe on left entering room before slide
    (('skill-70) (set-vector-meters! (-> arg0 extra trans)  703.0  76.6  25.65)) ;; infin jump on chain -> extended to top of crane
    (('skill-71) (set-vector-meters! (-> arg0 extra trans)  598.5  28.8  51.5)) ;; up high atop pipe - right before exit, stand on lip of pipe near end of slide and boosted over. or boosted from edge before exit and ledge grab thru pipe ("OOB")
    ;; dead town
    ;; === ruins (+sagehut) === 
    ;; (('skill-1) (set-vector-meters! (-> arg0 extra trans)  )) ;; this weird one doesn't actually spawn? but move it for the lulz - 
    (('skill-2) (set-vector-meters! (-> arg0 extra trans)  997.29  80.0 -656.2)) ;; atop wall in far back (hover)
    (('skill-3) (set-vector-meters! (-> arg0 extra trans)  1054.7  38.8 -545.0)) ;; jak1 orb hunt location - samos hut by keira's transpad
    ;; (('skill-4) (set-vector-meters! (-> arg0 extra trans)  )) ;;
    ;; (('skill-5) (set-vector-meters! (-> arg0 extra trans)  )) ;;
    ;; (('skill-6) (set-vector-meters! (-> arg0 extra trans)  )) ;;
    ;; (('skill-7) (set-vector-meters! (-> arg0 extra trans)  )) ;;
    ;; (('skill-89) (set-vector-meters! (-> arg0 extra trans)  )) ;;
    ;; (('skill-90) (set-vector-meters! (-> arg0 extra trans)  )) ;;


    ;; ====== MISC ======
    ;; fortress
    ;; === prison ===
    ;; === forexita ===
    (('crate-577) (set-vector-meters! (-> arg0 extra trans) 673.71  81.37 147.63))  ;; dark eco - on top of machine after swingpole
    (('crate-578) (set-vector-meters! (-> arg0 extra trans) 650.28  72.25 126.25))  ;; health - behind machine where you ledgegrab after boosted in speedruns
    (('crate-579) (set-vector-meters! (-> arg0 extra trans) 599.86  58.83 120.61))  ;; health - on pipe in middle of room
    (('crate-580) (set-vector-meters! (-> arg0 extra trans) 606.08  65.81  93.28))  ;; dark eco - on top of machine before where you boosted in speedruns
    (('crate-668) (set-vector-meters! (-> arg0 extra trans) 618.70  26.00 181.01))  ;; dark eco - behind pipe at bottom/entrance
    (('crate-669) (set-vector-meters! (-> arg0 extra trans) 724.94  52.24 164.13))  ;; dark eco - bottom of pit
    ;; === forexitb ===
    (('crate-953) (set-vector-meters! (-> arg0 extra trans) 538.16  26.34   40.87))  ;; health - moved to cylinder from ceiling for fortexitb-skill-4/5
    (('crate-954) (set-vector-meters! (-> arg0 extra trans) 548.87  26.69   64.18))  ;; health - moved to cylinder from ceiling for fortexitb-skill-5
    ;; dead town
    ;; 

    )
  (none)
  )

;; (defun mod-move-eco ((eco-name string) (vec vector))
;;   (let ((obj (the eco (process-by-ename eco-name))))
;;     ;; only move if not being suck-sucked
;;     (when (and obj (not (or (name= (-> obj state name) 'pickup) (name= (-> obj state name) 'notice-blue))))
;;       (vector-copy-no-w! (-> obj base) vec)
;;       (vector-copy-no-w! (-> obj root trans) vec)
;;       (vector-copy-no-w! (-> obj root-override trans) vec)
;;       (vector-copy-no-w! (-> obj root-override root-prim prim-core world-sphere) vec)

;;       (if (-> obj sound)
;;         (vector-copy-no-w! (-> obj sound trans) vec)
;;         )
;;       )
;;     )
;;   )

(defun mod-run-each-frame ()
  ;; === prison (first 2 rooms) ===
  (prison-door-button-check "prison-part-374" "prsn-cell-door-4")
  (prison-door-button-check "prison-part-375" "prsn-cell-door-3")
  (prison-door-button-check "prison-part-376" "prsn-cell-door-2")
  (prison-door-button-check "prison-part-377" "prsn-cell-door-1")
  (prison-door-button-check "prison-part-378" "prsn-cell-door-5")
  ;; === forexita (3rd room until shooting you from below) ===
  ;; === forexitb (shooting you from below to city exit) ===
  ;; === ruins (+sagehut) ===
  ;; (let ((p (the skill (process-by-ename "skill-3"))))  ;; make this visible only when sagehut loaded?
  ;; )
  (none)
  )


;; more for testing purposes than anything
(defun move-actor-str ((actor-name string) (x float) (y float) (z float))
  (cond 
    ((string= actor-name "target")
      (set-vector-meters! (-> *target* root trans) x y z)
      )
    ((entity-by-name actor-name)
      (let* ((entity-actor (entity-by-name actor-name))
            (actor (-> entity-actor extra process))
            )
        (when actor
          (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
          (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
          ;; (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
          )
        )
      )
    )
  (none)
  )

;; prints the position (root trans) of a process-drawable
(defmacro pd-pos-m (procname)
  `(let* ((obj (the process-drawable (process-by-ename ,procname)))
          (vec (-> obj root trans)))
    (format 0 "~m ~m ~m~%" (-> vec x) (-> vec y) (-> vec z) 4096.0)
    (none)
    )
  )