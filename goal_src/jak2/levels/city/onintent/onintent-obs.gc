;;-*-Lisp-*-
(in-package goal)

;; name: onintent-obs.gc
;; name in dgo: onintent-obs
;; dgos: ONINTENT

;; DECOMP BEGINS

(defskelgroup skel-onin-brain onin-brain onin-brain-lod0-jg onin-brain-idle-ja
              ((onin-brain-lod0-mg (meters 20)))               
              :bounds (static-spherem 0 0 0 0.6)
              :texture-level 6
              :shadow-joint-index 3
              )

(deftype onin-brain (skill)
  ()
  )

(defmethod common-post ((this onin-brain))
  (let ((spin-factor 1100.0))
    (quaternion-rotate-y! (-> this root quat) (-> this root quat) (* spin-factor (seconds-per-frame)))
    )
  (let ((f30-0 (-> this bob-amount)))
    (when (< 0.0 f30-0)
      (set! (-> this root trans y)
            (+ (-> this base y)
               (-> this suck-y-offset)
               (* f30-0
                  (sin
                    (* 0.25 109.22667
                       (the float
                            (mod (+ (- (current-time) (the-as int (-> this birth-time))) (the-as time-frame (-> this bob-offset))) 2400)
                            )
                       )
                    )
                  )
               )
            )
      (update-transforms (-> this root))
      )
    )
  (ja-post)
  (none)
  )

(defmethod init-from-entity! ((this onin-brain) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (let ((bob-amount 256.0))
    (initialize-allocations this)
    (process-drawable-from-entity! this (-> this entity))
    (-! (-> this root trans y) (meters 0.7))
    (-! (-> this base y) (meters 0.7))
    (initialize-options this 0 bob-amount (the-as fact-info #f))
    (update-transforms (-> this root))
    (go-to-initial-state this)
    )
  (none)
  )

(defmethod initialize-allocations ((this onin-brain))
  (stack-size-set! (-> this main-thread) 128)
  (let ((s5-0 (new 'process 'collide-shape-moving this (collide-list-enum hit-by-others))))
    (set! (-> s5-0 dynam) (copy *standard-dynamics* 'process))
    (set! (-> s5-0 reaction) cshape-reaction-default)
    (set! (-> s5-0 no-reaction)
          (the-as (function collide-shape-moving collide-query vector vector object) nothing))
          
    (let ((v1-8 (new 'process 'collide-shape-prim-sphere s5-0 (the-as uint 0))))
      (set! (-> v1-8 prim-core collide-as) (collide-spec collectable))
      (set! (-> v1-8 prim-core collide-with) (collide-spec tobot))
      (set-vector! (-> v1-8 local-sphere) 0.0 2048.0 0.0 4915.2)
      (set! (-> s5-0 total-prims) (the-as uint 1))
      (set! (-> s5-0 root-prim) v1-8))
      
    (set! (-> s5-0 nav-radius) (* 0.75 (-> s5-0 root-prim local-sphere w)))
    (let ((v1-11 (-> s5-0 root-prim)))
      (set! (-> s5-0 backup-collide-as) (-> v1-11 prim-core collide-as))
      (set! (-> s5-0 backup-collide-with) (-> v1-11 prim-core collide-with))
      )
    (set! (-> this root) s5-0)
    )
  (logior! (-> this mask) (process-mask actor-pause))
  (set! (-> this actor-pause) #t)
  (set! (-> this notify) (the-as handle #f))
  (set! (-> this fact) (new 'process 'fact-info this (pickup-type skill) 1.0))
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-onin-brain" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> this draw shadow-ctrl) *collectable-dummy-shadow-control*)
  (if (-> this entity)
      (nav-mesh-connect-from-ent this)
      )
  (set-vector! (-> this draw color-mult) 0.8 0.8 0.8 1.0)
  (set-vector! (-> this draw color-emissive) 0.2 0.2 0.2 1.0)
  0
  (none))