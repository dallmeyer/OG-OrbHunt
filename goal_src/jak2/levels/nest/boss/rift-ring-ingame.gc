;;-*-Lisp-*-
(in-package goal)

;; name: metalkor-extras.gc
;; name in dgo: metalkor-extras
;; dgos: NEB

;; DECOMP BEGINS

(defskelgroup skel-rift-ring-ingame rift-ring-in-game rift-ring-in-game-lod0-jg rift-ring-in-game-idle-ja
              ((rift-ring-in-game-lod0-mg (meters 999999)))
              :bounds (static-spherem 0 0 0 40)
              )

(deftype rift-ring-ingame (process-drawable)
  ((anim-speed          delayed-rand-float  :inline)
   (stutter             symbol)
   (spin-sound          sound-id)
   (spin-sound-playing  symbol)
   )
  (:state-methods
    idle
    )
  )


(defstate idle (rift-ring-ingame)
  :virtual #t
  :event (behavior ((proc process) (argc int) (message symbol) (block event-message-block))
    (case message
      (('stutter)
       (set! (-> self stutter) (the-as symbol (-> block param 0)))
       (set-params! (-> self anim-speed) 3 15 0.25)
       (reset! (-> self anim-speed))
       (set! (-> self anim-speed value) -0.25)
       )
      )
    )
  :trans (behavior ()
    (cond
      ((-> self stutter)
       (update! (-> self anim-speed))
       (ja :num! (loop! (+ 0.125 (-> self anim-speed value))))
       )
      (else
        (ja :num! (loop!))
        )
      )
    (sound-play "warp-ring" :id (-> self spin-sound) :position (-> self root trans))
    (set! (-> self spin-sound-playing) #t)
    )
  :code sleep-code
  :post (behavior ()
    (spawn (-> self part) (-> self root trans))
    (ja-post)
    )
  )

(defmethod deactivate ((this rift-ring-ingame))
  (if (-> this spin-sound-playing)
      (sound-stop (-> this spin-sound))
      )
  ((method-of-type process-drawable deactivate) this)
  (none)
  )

;; WARN: Return type mismatch object vs none.
(defmethod init-from-entity! ((this rift-ring-ingame) (arg0 entity-actor))
  "Typically the method that does the initial setup on the process, potentially using the [[entity-actor]] provided as part of that.
This commonly includes things such as:
- stack size
- collision information
- loading the skeleton group / bones
- sounds"
  (set! (-> this root) (new 'process 'trsqv))
  (process-drawable-from-entity! this arg0)
  (initialize-skeleton
    this
    (the-as skeleton-group (art-group-get-by-name *level* "skel-rift-ring-ingame" (the-as (pointer uint32) #f)))
    (the-as pair 0)
    )
  (set! (-> this part) (create-launch-control (-> *part-group-id-table* 1236) this))
  (set! (-> this draw light-index) (the-as uint 10))
  (set! (-> this stutter) #f)
  (set! (-> this spin-sound) (new-sound-id))
  (set! (-> this spin-sound-playing) #f)
  (go (method-of-object this idle))
  (none)
  )
