;;-*-Lisp-*-
(in-package goal)

(defun set-vector-meters! ((dst vector) (x float) (y float) (z float))
  (set-vector! dst (meters x) (meters y) (meters z) (-> dst w))
  )

(defmacro static-vector-meters (x y z)
  `(new 'static 'vector :x (meters ,x) :y (meters ,y) :z (meters ,z) :w 1.0)
  )
  
(defun vector-copy-no-w! ((dst vector) (src vector))
  (set! (-> dst x) (-> src x))
  (set! (-> dst y) (-> src y))
  (set! (-> dst z) (-> src z))
  )

(defun override-fuel-cell-position ((arg0 entity-actor) (x float) (y float) (z float))
  (format 0 "override-fuel-cell-pos for ~P~%" arg0)
  (when arg0
    (set-vector-meters! (-> arg0 extra trans) x y z)
    (set-vector-meters! (res-lump-struct arg0 'movie-pos vector :time (the-as float -1000000000.0)) x y z)
    )
  )

(defun mod-override-init-position ((obj process-drawable) (arg0 entity-actor))
  (mod-training-override-init-position obj arg0)
  (mod-village1-override-init-position obj arg0)
  (mod-jungle-override-init-position obj arg0)
  (mod-beach-override-init-position obj arg0)
  (mod-misty-override-init-position obj arg0)
  (mod-firecanyon-override-init-position obj arg0)
  (mod-village2-override-init-position obj arg0)
  (mod-sunken-override-init-position obj arg0)
  (mod-swamp-override-init-position obj arg0)
  (mod-rolling-override-init-position obj arg0)
  (mod-ogre-override-init-position obj arg0)
  (mod-village3-override-init-position obj arg0)
  (mod-snowy-override-init-position obj arg0)
  (mod-cave-override-init-position obj arg0)
  (mod-lavatube-override-init-position obj arg0)
  (mod-citadel-override-init-position obj arg0)
  
  (none)
  )


(define-extern aphid type)
(defun mod-override-path ((obj nav-enemy))
  (case (-> obj type)
    ((aphid)
      (set-vector-meters! (-> obj path cverts 0) 441.7 -44.0 -288.1)
      (set-vector-meters! (-> obj path cverts 1) 426.6 -44.0 -288.1)
      (set-vector-meters! (-> obj path cverts 2) 426.6 -44.0 -260.1)
      (set-vector-meters! (-> obj path cverts 3) 441.7 -44.0 -260.1)
      (vector-copy! (-> obj nav destination-pos) (-> *target* root trans))
      )
    (else
      (when #f
        (format 0 "Unhandled mod-override-path type ~A~%" (-> obj type))
        )
      )
    )
  (none)
  )

(defun mod-move-eco ((obj eco) (vec vector))
  ;; only move if not being suck-sucked
  (when (not (or (name= (-> obj state name) 'pickup) (name= (-> obj state name) 'notice-blue)))
    (vector-copy-no-w! (-> obj base) vec)
    (vector-copy-no-w! (-> obj root trans) vec)
    (vector-copy-no-w! (-> obj root-override trans) vec)
    (vector-copy-no-w! (-> obj root-override root-prim prim-core world-sphere) vec)

    (if (-> obj sound)        
      (vector-copy-no-w! (-> obj sound trans) vec)
      )
    )
  )

(defun mod-run-each-frame ()
  (mod-training-run-each-frame)
  (mod-village1-run-each-frame)
  (mod-jungle-run-each-frame)
  (mod-beach-run-each-frame)
  (mod-misty-run-each-frame)
  (mod-firecanyon-run-each-frame)
  (mod-village2-run-each-frame)
  (mod-sunken-run-each-frame)
  (mod-swamp-run-each-frame)
  (mod-rolling-run-each-frame)
  (mod-ogre-run-each-frame)
  (mod-village3-run-each-frame)
  (mod-snowy-run-each-frame)
  (mod-cave-run-each-frame)
  (mod-lavatube-run-each-frame)
  (mod-citadel-run-each-frame)

  (none)
  )

(defun mod-override-child-fuel-cell-movie-pos ((dst vector) (obj fuel-cell) (maybe-parent process))
  (format #t "checking for override with parent ~A / grandparent ~A / maybe-parent ~A ~%"
    (-> (ppointer->process (-> obj parent)) name)
    (-> (ppointer->process (-> (ppointer->process (-> obj parent)) parent)) name)
    (-> maybe-parent name)
    )          

  ;; check parent
  (case (-> (ppointer->process (-> obj parent)) name) :comp name=
    (('plant-boss-3)
      ;; plant boss -> in center where eco switch usually is
      (set-vector-meters! dst 434.3 -41.0 -248.5)
      )
    (('eggtop-6)
      ;; blue-eco switch -> moved to plant boss room
      (set-vector-meters! dst 270.5 -45.0 -292.9)
      )
    (('harvester-87 'harvester-88 'harvester-89 'harvester-90 'harvester-91 'ecoventrock-3 'ecoventrock-4 'ecoventrock-5 'ecoventrock-6 'ecoventrock-7)
      ;; second pillar to cannon tower
      (set-vector-meters! dst -210.29  30.55 -355.45)
      )
    (('pelican-1)
      (cond
        ((name= (-> (the pelican (ppointer->process (-> obj parent))) state name) 'pelican-spit)
          (set-vector-meters! dst -127.78  18.60 -474.34) ;; mid waterfall
          )
        ((name= (-> (the pelican (ppointer->process (-> obj parent))) state name) 'pelican-explode)
          (set-vector-meters! dst -256.17  28.28 -465.54) ;; high plateau above grotto
          )
        )
      )
    (('mistycannon-4 'babak-with-cannon-1)
      (set-vector-meters! dst -99.35  22.83 -307.85) ;; near cannon, below orig flutflut nest
      (set-vector-meters! (res-lump-struct (-> obj entity) 'movie-pos (vector) :time (the-as float -1000000000.0)) -99.35  22.83 -307.85)
      )
    (('mistycannon-8 'babak-with-cannon-5)
      (set-vector-meters! dst -138.39  57.04 966.67) ;; up top where logs come out
      (set-vector-meters! (res-lump-struct (-> obj entity) 'movie-pos (vector) :time (the-as float -1000000000.0)) -138.39  57.04 966.67)
      )
    (('boat-fuelcell-1 'balloonlurker-9 'balloonlurker-10 'balloonlurker-11 'balloonlurker-12 'balloonlurker-13 'balloonlurker-14)
      ;; blue eco jump from zoomer dock / just over the fence -> valid for one free zoomer OOB
      (set-vector-meters! dst -12.69  9.5 1268.28) 
      )
    (('racer-8)
      ;; up ledge from where normally is at end of FC
      (set-vector-meters! dst 326.08  33.62 -1448.86)
      )
    (('exit-chamber-1)  ;; inside elevator
      (vector-copy! dst (static-vector-meters 575.8 -246.8 -1679.49))
      )
    (('swamp-tetherrock-13)
      (vector-copy! dst (static-vector-meters 390.12  12.70 -2065.66))
      )
    (('swamp-tetherrock-14)
      (vector-copy! dst (static-vector-meters 634.70  29.61 -1956.83))
      )
    (('swamp-tetherrock-15)
      (vector-copy! dst (static-vector-meters 524.87  11.5 -1909.68))
      )
    (('swamp-tetherrock-16)
      (vector-copy! dst (static-vector-meters 369.65  10.0 -1963.15))
      )
    (('race-ring-24) ;; purple rings
      (vector-copy! dst (static-vector-meters -327.0  24.04 -1578.35))
      (set-vector-meters! (res-lump-struct (-> obj entity) 'movie-pos (vector) :time (the-as float -1000000000.0)) -327.0  24.04 -1578.35)
      )
    (('race-ring-53) ;; blue rings
      (vector-copy! dst (static-vector-meters -283.21  21.30 -1516.39))
      (set-vector-meters! (res-lump-struct (-> obj entity) 'movie-pos (vector) :time (the-as float -1000000000.0)) -283.21  21.30 -1516.39)
      )
    (('racer-15)
      ;; up ledge from where normally is at end of MP
      (set-vector-meters! dst 985.71  40.47 -3403.63)
      )
    (('ogreboss-1)
      ;; hot rock near normal spawn
      (set-vector-meters! dst 209.98  31.1 -1897.90)
      )
    (('crate-2987)
      ;; secret cell in VC, moved to redsage hut
      (set-vector-meters! dst 1107.55  53.2 -3489.15)
      )
    (('snow-eggtop-4)
      ;; yellow-eco switch -> moved to tower in fort
      (set-vector-meters! dst 836.59 255.4 -3243.90)
      )
    (('snow-switch-1)
      ;; inside fort opposite orig cell, use flutflut + blue eco to jump in
      (set-vector-meters! dst  802.36 240.65 -3275.89)
      )
    (else
      (format #t "fuel movie override, didnt match parent ~A ~%" (-> (ppointer->process (-> obj parent)) name))
      ;; check grandparent
      (case (-> (ppointer->process (-> (ppointer->process (-> obj parent)) parent)) name) :comp name=
        (('crate-2961 'crate-2959 'crate-2958 'crate-2957 'crate-2956 'crate-2955 'crate-2960)
          ;; geyser -> in back geyser (zoom walk from last fly)
          (set-vector-meters! dst -1110.5 13.0 1058.0)
          )
        (('crate-3142 'crate-3141 'crate-3143 'crate-3144 'crate-3147 'crate-3146 'crate-3145)
          ;; sandover -> on farmers roof
          (set-vector-meters! dst -9.0 15.0 -60.5)
          )
        (('crate-689 'crate-688 'crate-3 'crate-47 'crate-1844 'crate-58 'crate-28)
          ;; FJ -> top of tallest blue eco tower
          (set-vector-meters! dst 362.3 109.0 -275.8)
          )
        (('crate-213 'crate-646 'crate-647 'crate-648 'crate-649 'crate-651 'crate-2467)
          ;; sentinel -> orig flutflutegg nest
          (set-vector-meters! dst -56.42  42.7 -290.57)
          )
        (('crate-659 'crate-672 'crate-673 'crate-684 'crate-747 'crate-2560 'crate-2561)
          ;; misty -> bone near arena entrance
          (set-vector-meters! dst -158.17  22.0 883.41)
          )
        (('crate-1019 'crate-1027 'crate-1028 'crate-1029 'crate-1030 'crate-1032 'crate-1033)
          ;; firecanyon -> wherever target is (zoomer)
          (vector-copy-no-w! dst (-> *target* root trans))
          )
        (('crate-3127 'crate-3128 'crate-3129 'crate-3130 'crate-3131 'crate-3132 'crate-3133)
          ;; rock village - in center, above hanging fire
          (set-vector-meters! dst 295.85  23.0 -1631.51)
          )
        (('crate-925 'crate-926 'crate-917 'crate-923)
          ;; LPC (sunken) - floating above steps in piggyback room
          (set-vector-meters! dst 614.96 -128.94 -1726.03)
          )
        (('crate-2705)
          ;; LPC (sunkenb) - floating in center of helix
          (set-vector-meters! dst 586.27 -410.48 -1787.47)
          )
        (('crate-748 'crate-762 'crate-786 'crate-787 'crate-843 'crate-849 'crate-2936)
          ;; Boggy - past second bats
          (set-vector-meters! dst 368.55   1.61 -2156.54)
          )
        (('crate-2176 'crate-2188 'crate-2187 'crate-2194 'crate-2209 'crate-2199 'crate-2289)
          ;; Basin - boosted from raised platform with hole in it 
          (set-vector-meters! dst -388.48  44.80 -1569.73)
          )
        (('crate-2430 'crate-2989 'crate-2990 'crate-2991 'crate-2992 'crate-2993 'crate-2994)
          ;; Mountain Pass - up on "OOB" ledge with trees before big jump
          (set-vector-meters! dst 30.2  46.03 -2974.5)
          )
        (else
          (format #t "fuel movie override, didnt match grandparent ~A ~%" (-> (ppointer->process (-> (ppointer->process (-> obj parent)) parent)) name))
          ;; check maybe-parent
          (case (-> maybe-parent name) :comp name=
            (('bird-lady-beach-1)
              ;; wherever player is
              (vector-copy! dst (-> *target* root trans))
              (vector-copy! (res-lump-struct (-> obj entity) 'movie-pos vector :time (the-as float -1000000000.0)) (-> *target* root trans))
              )
            (else
              (when #t
                (format #t "no movie-pos override with parent ~A / grandparent ~A / maybe-parent ~A ~%"
                  (-> (ppointer->process (-> obj parent)) name)
                  (-> (ppointer->process (-> (ppointer->process (-> obj parent)) parent)) name)
                  (-> maybe-parent name)
                  )          
                )
              )
            )
          )
        )
      )
    )
  (none)
  )

;; more for testing purposes than anything
(defun move-actor-str ((actor-name string) (x float) (y float) (z float))
  (when (entity-by-name actor-name)
    (let* ((entity-actor (entity-by-name actor-name))
           (actor (-> entity-actor extra process))
           )
      (when actor
        (case (-> actor type)
          ((fuel-cell)
              (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the fuel-cell actor) base) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the fuel-cell actor) root-override trans) (meters x) (meters y) (meters z) 1.0)
            (when (name= (-> (the fuel-cell actor) state name) 'wait)
              ;; only move collision when idle (messes up glowing in cutscene)
              (set! (-> (the fuel-cell actor) root-override root-prim world-sphere x) (meters x))
              (set! (-> (the fuel-cell actor) root-override root-prim world-sphere y) (meters y))
              (set! (-> (the fuel-cell actor) root-override root-prim world-sphere z) (meters z))
              )
            )
          ((orb-cache-top)
            ;; don't move while its activated (let it go up/down)
            (when (not (name= (-> (the orb-cache-top actor) state name) 'orb-cache-top-activate))
              (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the orb-cache-top actor) basetrans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the orb-cache-top actor) root-override trans) (meters x) (meters y) (meters z) 1.0)
              (set! (-> (the orb-cache-top actor) root-override root-prim world-sphere x) (meters x))
              (set! (-> (the orb-cache-top actor) root-override root-prim world-sphere y) (meters y))
              (set! (-> (the orb-cache-top actor) root-override root-prim world-sphere z) (meters z))
              (set-vector! (-> (the orb-cache-top actor) draw origin) (meters x) (meters y) (meters z) 1.0)
              (let ((radius (-> (the process-drawable actor) draw radius))
                    (bounds (res-lump-data entity-actor 'visvol (inline-array vector)))
                    )
                (set-vector! (-> bounds 0) (- (meters x) radius) (meters y) (- (meters z) radius) 1.0)
                (set-vector! (-> bounds 1) (+ (meters x) radius) (meters y) (+ (meters z) radius) 1.0)
                )
              )
            )
          ((money)
            ;; don't move orbs if being blue-eco-sucked
            (when (not (logtest? (-> (the money actor) flags) (collectable-flags suck)))
              (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the money actor) base) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the money actor) root-override trans) (meters x) (meters y) (meters z) 1.0)
              (set! (-> (the money actor) root-override root-prim world-sphere x) (meters x))
              (set! (-> (the money actor) root-override root-prim world-sphere y) (meters y))
              (set! (-> (the money actor) root-override root-prim world-sphere z) (meters z))
              )
            )
          ((crate crate-buzzer)
            ;; only move crates if they're not jumping
            (when (= (-> (the crate actor) smush amp) 0.0)
              (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the crate actor) base) (meters x) (meters y) (meters z) 1.0)
              (set-vector! (-> (the crate actor) root-override trans) (meters x) (meters y) (meters z) 1.0)
              (set! (-> (the crate actor) root-override root-prim world-sphere x) (meters x))
              (set! (-> (the crate actor) root-override root-prim world-sphere y) (meters y))
              (set! (-> (the crate actor) root-override root-prim world-sphere z) (meters z))
              )
            )
          (else
            (format 0 "unexpected actor type ~S ~S ~S~%" actor-name (-> entity-actor type) (-> actor type))
            (set-vector! (-> entity-actor trans) (meters x) (meters y) (meters z) 1.0)
            (set-vector! (-> entity-actor extra trans) (meters x) (meters y) (meters z) 1.0)
            ;; (set-vector! (-> (the process-drawable actor) root trans) (meters x) (meters y) (meters z) 1.0)
            )
          )
        )
      )
    )
  (none)
  )

(defmacro process-drawable-pos-m (procname)
  `(let* ((obj (the process-drawable (process-by-ename ,procname)))
          (vec (-> obj root trans)))
    (format 0 "~F ~F ~F~%" (/ (-> vec x) 4096.0) (/ (-> vec y) 4096.0) (/ (-> vec z) 4096.0))
    (none)
    )
  )